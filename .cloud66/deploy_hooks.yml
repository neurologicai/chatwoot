hooks:
  before_deploy:
    - name: "Verificar configuração do banco"
      command: "ruby -e \"require 'erb'; require 'yaml'; YAML.load(ERB.new(File.read('config/database.yml')).result)\""
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: true

    - name: "Instalar Node.js 23.x e pnpm 10.x"
      command: |
        echo "=== Installing Node.js 23.x and pnpm 10.x ==="
        
        # Verificar versão atual do Node.js
        current_node=$(node --version 2>/dev/null || echo "none")
        echo "Current Node.js version: $current_node"
        
        # Instalar Node.js 23.x se não for a versão correta
        if [[ "$current_node" != "v23."* ]]; then
          echo "Installing Node.js 23.x..."
          curl -fsSL https://deb.nodesource.com/setup_23.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Verificar instalação
          echo "Node.js version after installation: $(node --version 2>/dev/null || echo 'failed')"
          echo "Node.js location: $(which node 2>/dev/null || echo 'not found')"
        else
          echo "Node.js 23.x already installed"
        fi
        
        # Garantir que o PATH priorize /usr/bin
        export PATH="/usr/bin:/usr/local/bin:$PATH"
        
        # Verificar e instalar pnpm se necessário
        current_pnpm=$(pnpm --version 2>/dev/null || echo "none")
        echo "Current pnpm version: $current_pnpm"
        
        if [[ "$current_pnpm" == "none" ]]; then
          echo "Installing pnpm 10.x..."
          sudo npm install -g pnpm@10.2.0
          
          # Criar symlinks para garantir que pnpm esteja disponível
          pnpm_bin=$(find /usr -name "pnpm.cjs" -o -name "pnpm.js" 2>/dev/null | head -1)
          if [[ -n "$pnpm_bin" ]]; then
            sudo ln -sf "$pnpm_bin" /usr/bin/pnpm
            echo "pnpm symlink created: /usr/bin/pnpm -> $pnpm_bin"
          fi
          
          # Verificar instalação
          echo "pnpm version after installation: $(pnpm --version 2>/dev/null || echo 'failed')"
          echo "pnpm location: $(which pnpm 2>/dev/null || echo 'not found')"
        else
          echo "pnpm already installed"
        fi
        
        echo "=== Installation complete ==="
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: true

    - name: "Verificar instalação final"
      command: |
        echo "Verificando se tudo está funcionando..."
        export PATH="/usr/local/bin:/usr/local/lib/node_modules/.bin:$PATH"
        echo "Node.js: $(node --version)"
        echo "npm: $(npm --version)" 
        echo "pnpm location: $(which pnpm)"
        echo "pnpm version: $(pnpm --version)"
        echo "PATH atual: $PATH"
        echo "Instalação concluída com sucesso!"
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: true

  after_deploy:
    - name: "Rodar migrações"
      command: "bundle exec rails db:migrate"
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: true

    - name: "Verificar conexão com o banco"
      command: "bundle exec rails runner \"ActiveRecord::Base.connection.execute('SELECT 1')\""
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: true

    - name: "Limpar cache"
      command: "bundle exec rails tmp:cache:clear"
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: false

    - name: "Reiniciar Sidekiq"
      command: "bundle exec sidekiqctl quiet && bundle exec sidekiqctl stop"
      user: "deploy"
      run_on: "sidekiq_servers"
      fail_on_error: false