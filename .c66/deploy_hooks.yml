hooks:
  before_rails:
    - name: "Instalar Node.js 20"
      command: |
        # Remover versão antiga se existir
        sudo apt-get remove -y nodejs npm
        # Instalar Node.js 20.x
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
        sudo apt-get install -y nodejs
        echo "Node.js $(node --version) instalado"
        echo "npm $(npm --version) disponível"
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: true

    - name: "Instalar dependências JavaScript"
      command: |
        # Gerar package-lock.json se não existir
        if [ ! -f package-lock.json ]; then
          npm install --package-lock-only
        fi
        npm ci
        echo "Dependências JavaScript instaladas com sucesso"
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: true

  before_deploy:
    - name: "Verificar configuração do banco"
      command: "ruby -e \"require 'erb'; require 'yaml'; YAML.load(ERB.new(File.read('config/database.yml')).result)\""
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: true

  after_deploy:
    - name: "Rodar migrações"
      command: "bundle exec rails db:migrate"
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: true

    - name: "Verificar conexão com o banco"
      command: "bundle exec rails runner \"ActiveRecord::Base.connection.execute('SELECT 1')\""
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: true

    - name: "Limpar cache"
      command: "bundle exec rails tmp:cache:clear"
      user: "deploy"
      run_on: "all_servers"
      fail_on_error: false

    - name: "Reiniciar Sidekiq"
      command: "bundle exec sidekiqctl quiet && bundle exec sidekiqctl stop"
      user: "deploy"
      run_on: "sidekiq_servers"
      fail_on_error: false